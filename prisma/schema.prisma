generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  clerkId     String    @unique
  phoneNumber String    @unique
  username    String    @unique
  posts       Post[]
  likes       Like[]
  comments    Comment[]
  followers   Follow[]  @relation("following")
  following   Follow[]  @relation("follower")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Post {
  id        String    @id @default(uuid())
  userId    String
  content   String
  imageUrl  String?
  gifUrl    String?
  hashtags  String[]  @default([])
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  type       String // like, comment, follow
  fromUserId String?
  postId     String?
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
}
